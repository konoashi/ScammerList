

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()

        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"

        }

        maven {
            name = "mongo"
            url = "https://plugins.gradle.org/m2/"
        }

        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }

        maven {
            name = 'jitpack.io'
            url = 'https://jitpack.io'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'


    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'




/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "1.0.4 PRE9"
group= "fr.konoashi.ScamerList" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ScammerList"

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    coreMod = 'fr.konoashi.ScamerList.PlugLoad'

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_22"


    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {






    compile "com.squareup.okhttp3:okhttp:4.9.0"
    implementation "com.squareup.okhttp3:okhttp:4.9.0"






}


repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {



    compile 'org.spongepowered:mixin:0.7.11-SNAPSHOT'

}


compileJava {
    sourceCompatibility = targetCompatibility = 1.8

}



processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }


        }

sourceSets {
    main {
        ext.refMap = "mixins.scammerlist.refmap.json"
    }
}



jar {


    manifest {
        attributes 'FMLAT': 'scammerList_at.cfg'
        attributes "MixinConfigs": "mixins.scammerlist.json"
    }
    manifest.attributes(
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs': 'mixins.scammerlist.json',
            'FMLCorePluginContainsFMLMod': true,
            'FMLCorePlugin': 'fr.konoashi.ScamerList.PlugLoad',
            'ForceLoadAsMod': true,
    )
}







mixin {
    add sourceSets.main, 'mixins.scammerlist.refmap.json'
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    manifest {
        attributes "Main-Class": "fr.konoashi.ScamerList.Main"
    }
    classifier = '-mixin'
    from {

        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}


sourceSets { main { output.resourcesDir = output.classesDir } }





